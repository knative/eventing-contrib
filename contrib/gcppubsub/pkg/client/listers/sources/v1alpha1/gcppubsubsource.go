/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing-sources/contrib/gcppubsub/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GcpPubSubSourceLister helps list GcpPubSubSources.
type GcpPubSubSourceLister interface {
	// List lists all GcpPubSubSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GcpPubSubSource, err error)
	// GcpPubSubSources returns an object that can list and get GcpPubSubSources.
	GcpPubSubSources(namespace string) GcpPubSubSourceNamespaceLister
	GcpPubSubSourceListerExpansion
}

// gcpPubSubSourceLister implements the GcpPubSubSourceLister interface.
type gcpPubSubSourceLister struct {
	indexer cache.Indexer
}

// NewGcpPubSubSourceLister returns a new GcpPubSubSourceLister.
func NewGcpPubSubSourceLister(indexer cache.Indexer) GcpPubSubSourceLister {
	return &gcpPubSubSourceLister{indexer: indexer}
}

// List lists all GcpPubSubSources in the indexer.
func (s *gcpPubSubSourceLister) List(selector labels.Selector) (ret []*v1alpha1.GcpPubSubSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GcpPubSubSource))
	})
	return ret, err
}

// GcpPubSubSources returns an object that can list and get GcpPubSubSources.
func (s *gcpPubSubSourceLister) GcpPubSubSources(namespace string) GcpPubSubSourceNamespaceLister {
	return gcpPubSubSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GcpPubSubSourceNamespaceLister helps list and get GcpPubSubSources.
type GcpPubSubSourceNamespaceLister interface {
	// List lists all GcpPubSubSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GcpPubSubSource, err error)
	// Get retrieves the GcpPubSubSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GcpPubSubSource, error)
	GcpPubSubSourceNamespaceListerExpansion
}

// gcpPubSubSourceNamespaceLister implements the GcpPubSubSourceNamespaceLister
// interface.
type gcpPubSubSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GcpPubSubSources in the indexer for a given namespace.
func (s gcpPubSubSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GcpPubSubSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GcpPubSubSource))
	})
	return ret, err
}

// Get retrieves the GcpPubSubSource from the indexer for a given namespace and name.
func (s gcpPubSubSourceNamespaceLister) Get(name string) (*v1alpha1.GcpPubSubSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gcppubsubsource"), name)
	}
	return obj.(*v1alpha1.GcpPubSubSource), nil
}
