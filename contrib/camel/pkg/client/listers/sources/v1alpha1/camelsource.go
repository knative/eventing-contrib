/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing-sources/contrib/camel/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CamelSourceLister helps list CamelSources.
type CamelSourceLister interface {
	// List lists all CamelSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CamelSource, err error)
	// CamelSources returns an object that can list and get CamelSources.
	CamelSources(namespace string) CamelSourceNamespaceLister
	CamelSourceListerExpansion
}

// camelSourceLister implements the CamelSourceLister interface.
type camelSourceLister struct {
	indexer cache.Indexer
}

// NewCamelSourceLister returns a new CamelSourceLister.
func NewCamelSourceLister(indexer cache.Indexer) CamelSourceLister {
	return &camelSourceLister{indexer: indexer}
}

// List lists all CamelSources in the indexer.
func (s *camelSourceLister) List(selector labels.Selector) (ret []*v1alpha1.CamelSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CamelSource))
	})
	return ret, err
}

// CamelSources returns an object that can list and get CamelSources.
func (s *camelSourceLister) CamelSources(namespace string) CamelSourceNamespaceLister {
	return camelSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CamelSourceNamespaceLister helps list and get CamelSources.
type CamelSourceNamespaceLister interface {
	// List lists all CamelSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CamelSource, err error)
	// Get retrieves the CamelSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CamelSource, error)
	CamelSourceNamespaceListerExpansion
}

// camelSourceNamespaceLister implements the CamelSourceNamespaceLister
// interface.
type camelSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CamelSources in the indexer for a given namespace.
func (s camelSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CamelSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CamelSource))
	})
	return ret, err
}

// Get retrieves the CamelSource from the indexer for a given namespace and name.
func (s camelSourceNamespaceLister) Get(name string) (*v1alpha1.CamelSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("camelsource"), name)
	}
	return obj.(*v1alpha1.CamelSource), nil
}
