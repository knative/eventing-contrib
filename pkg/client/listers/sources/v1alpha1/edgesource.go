/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing-sources/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EdgeSourceLister helps list EdgeSources.
type EdgeSourceLister interface {
	// List lists all EdgeSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EdgeSource, err error)
	// EdgeSources returns an object that can list and get EdgeSources.
	EdgeSources(namespace string) EdgeSourceNamespaceLister
	EdgeSourceListerExpansion
}

// edgeSourceLister implements the EdgeSourceLister interface.
type edgeSourceLister struct {
	indexer cache.Indexer
}

// NewEdgeSourceLister returns a new EdgeSourceLister.
func NewEdgeSourceLister(indexer cache.Indexer) EdgeSourceLister {
	return &edgeSourceLister{indexer: indexer}
}

// List lists all EdgeSources in the indexer.
func (s *edgeSourceLister) List(selector labels.Selector) (ret []*v1alpha1.EdgeSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EdgeSource))
	})
	return ret, err
}

// EdgeSources returns an object that can list and get EdgeSources.
func (s *edgeSourceLister) EdgeSources(namespace string) EdgeSourceNamespaceLister {
	return edgeSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EdgeSourceNamespaceLister helps list and get EdgeSources.
type EdgeSourceNamespaceLister interface {
	// List lists all EdgeSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EdgeSource, err error)
	// Get retrieves the EdgeSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EdgeSource, error)
	EdgeSourceNamespaceListerExpansion
}

// edgeSourceNamespaceLister implements the EdgeSourceNamespaceLister
// interface.
type edgeSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EdgeSources in the indexer for a given namespace.
func (s edgeSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EdgeSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EdgeSource))
	})
	return ret, err
}

// Get retrieves the EdgeSource from the indexer for a given namespace and name.
func (s edgeSourceNamespaceLister) Get(name string) (*v1alpha1.EdgeSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("edgesource"), name)
	}
	return obj.(*v1alpha1.EdgeSource), nil
}
