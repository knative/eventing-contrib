/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/eventing-contrib/rabbitmq/source/pkg/apis/sources/v1alpha1"
)

// RabbitmqSourceLister helps list RabbitmqSources.
type RabbitmqSourceLister interface {
	// List lists all RabbitmqSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RabbitmqSource, err error)
	// RabbitmqSources returns an object that can list and get RabbitmqSources.
	RabbitmqSources(namespace string) RabbitmqSourceNamespaceLister
	RabbitmqSourceListerExpansion
}

// rabbitmqSourceLister implements the RabbitmqSourceLister interface.
type rabbitmqSourceLister struct {
	indexer cache.Indexer
}

// NewRabbitmqSourceLister returns a new RabbitmqSourceLister.
func NewRabbitmqSourceLister(indexer cache.Indexer) RabbitmqSourceLister {
	return &rabbitmqSourceLister{indexer: indexer}
}

// List lists all RabbitmqSources in the indexer.
func (s *rabbitmqSourceLister) List(selector labels.Selector) (ret []*v1alpha1.RabbitmqSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RabbitmqSource))
	})
	return ret, err
}

// RabbitmqSources returns an object that can list and get RabbitmqSources.
func (s *rabbitmqSourceLister) RabbitmqSources(namespace string) RabbitmqSourceNamespaceLister {
	return rabbitmqSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RabbitmqSourceNamespaceLister helps list and get RabbitmqSources.
type RabbitmqSourceNamespaceLister interface {
	// List lists all RabbitmqSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RabbitmqSource, err error)
	// Get retrieves the RabbitmqSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RabbitmqSource, error)
	RabbitmqSourceNamespaceListerExpansion
}

// rabbitmqSourceNamespaceLister implements the RabbitmqSourceNamespaceLister
// interface.
type rabbitmqSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RabbitmqSources in the indexer for a given namespace.
func (s rabbitmqSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RabbitmqSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RabbitmqSource))
	})
	return ret, err
}

// Get retrieves the RabbitmqSource from the indexer for a given namespace and name.
func (s rabbitmqSourceNamespaceLister) Get(name string) (*v1alpha1.RabbitmqSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rabbitmqsource"), name)
	}
	return obj.(*v1alpha1.RabbitmqSource), nil
}
